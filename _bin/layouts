#!/usr/bin/env ruby
#
# layouts - generate specific layout files
#
# Written by Rich Morin, CFCL, 2012.

  require 'yaml'

  def main

    @ej_mode  = ARGV[0] || 'dev'
    msg = "unrecognized @ej_mode (#{ @ej_mode })"
    raise msg unless %w[ dev prod ].index(@ej_mode)

    @potions  = {}

    p_base    = '_potions'
    p_patt    = p_base + '/*.yml'
    p_paths   = Dir.glob(p_patt)

    # Slurp in all of the potions.

    p_paths.each do |p_path|
      p_name            = File.basename(p_path, '.yml')
      p_yaml            = File.read(p_path) + "\n"
      @potions[p_name]  = YAML.load(p_yaml)
    end

    @ej_maps  = @potions['_ext_js']
    raise 'no "_ext_js" file found' unless @ej_maps

    do_layouts
  end


  def do_layouts

    p_names   = @potions.keys.sort

    p_names.each do |p_name|
      next if p_name =~ /^_/

      out       = ''
      potion    = @potions[p_name]
      layouts   = potion['layouts']
      coffee    = layouts['coffee']
      css       = layouts['css']
      ej_names  = layouts['ext_js']

      # If p_name were "demo_2", potions[p_name] might look like this:
      #
      #  {
      #    "layouts"=>{
      #      "base"    =>"g_demo",
      #      "coffee"  =>["demo_2/lib_chart", ..., "demo_2/main"],
      #      "css"     =>["default", "demo_2"],
      #      "ext_js"  =>["jquery", "ember", "d3", "coffee-script"]
      #    }
      #  }

      out += load_ext_js(ej_names)    if ej_names
      out += include_coffee(coffee)   if coffee
      out += include_css(css)         if css

      # Fold in replacement content and write file.

      l_base    = layouts['base']
      i_path    = "_layouts/#{ l_base }.html"
      o_path    = "_layouts/s_#{ p_name }.html"
      i_text    = File.read(i_path)
      o_text    = i_text.sub(/^ +!!!\s+p_layouts\s*\n/, out)

      File.open(o_path, 'w') {|f| f.puts o_text }

      puts "> Created s_#{ p_name } from #{ l_base }." #T
    end
  end


  def include_coffee(coffee)
  #
  # Include CoffeeScript files, if any.

    lines   = coffee.map {|n| "{% include scripts/#{ n }.coffee %}" }

    <<-EOT
<!-- Include local CoffeeScript files. -->\n
<script type="text/coffeescript">
# <![CDATA[
#{ lines.join("\n") }
# ]]>
</script>\n
    EOT
  end


  def include_css(css)
  #
  # Include CSS files, if any.

    lines   = css.map {|n| "{% include styles/#{ n }.css %}" }

    <<-EOT
<!-- Include local CSS files. -->\n
<style type="text/css">
#{ lines.join("\n") }
</style>\n
    EOT
  end


  def load_ext_js(ej_names)
  #
  # Load external JavaScript, if any.

    msg = 'ej_names not defined'
    raise msg unless ej_names

    out = "<!-- Load external JavaScript libraries. -->\n\n"

    ej_names.each do |ej_name|
      file_name   = @ej_maps[ej_name][@ej_mode] rescue nil
      msg         = "@ej_maps['#{ ej_name }']['#{ @ej_mode }'] not defined"
      raise msg unless file_name

      file_path   = "external/#{ file_name }"
      msg         = "file_path (#{ file_path }) not found"
      raise msg unless File.file?(file_path)

      pre_text    = @ej_maps[ej_name]['pre']
      out        += pre_text if pre_text
      out        += "<script src='../#{ file_path }'></script>\n\n"
    end

    out
  end


main
